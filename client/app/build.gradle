plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
}

def secrets = getSecrets()

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "group01.smartcar.client"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "MQTT_SERVER_URL", secrets['MQTT_SERVER_URL'])
        buildConfigField("String", "MQTT_CLIENT_ID", secrets['MQTT_CLIENT_ID'])
        buildConfigField("String", "MQTT_USERNAME", secrets['MQTT_USERNAME'])
        buildConfigField("String", "MQTT_PASSWORD", secrets['MQTT_PASSWORD'])
        buildConfigField("String", "LOGIN_TEST_USERNAME", secrets['LOGIN_TEST_USERNAME'])
        buildConfigField("String", "LOGIN_TEST_PASSWORD", secrets['LOGIN_TEST_PASSWORD'])
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.firebase:firebase-database:20.0.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:1.10.19'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:rules:1.4.0-beta01'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

def getSecrets() {
    def secretsFile = rootProject.file("secrets.properties").exists()
        ? rootProject.file("secrets.properties")
        : rootProject.file("secrets-default.properties")

    def properties = new Properties()

    properties.load(new FileInputStream(secretsFile))

    return properties
}